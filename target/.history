compile
test
console
test
test CodeSpec
test :CodeSpec
test
test *SimTest
test *SimSpec
test-only *SimSpec
test
doc
:q
exit
compile
test
compile
test
exit
compile
test
test-only CodeSpec
test
doc
console
doc
compile
doc
exit
compile
test
exit
compile
doc
console
doc
   class MySim(name: String, var time : Int = 0) {
         var pos  = 0
         val prog = compile(__forever(__do{ print(name) },
                                      __wait(1)))
       }
       def execf(s: MySim, u: Int) = {
         val (p, t, n) = Code.exec(s.prog, s.pos, s.time, u);
         s.pos = p; s.time = t;
         n
       }
       val s1 = new MySim("a", 1);
       val s2 = new MySim("b");
       execp[MySim, Int](Vector(s1, s2), execf, 3, 6)
    class MySim(name: String, var time : Int = 0) {
         var pos  = 0
         val prog = compile(__forever(__do{ print(name) },
                                      __wait(1)))
       }
console
doc
test
test-only SimSpec
test
test-only SimSpec
test
:q
test
test-only CodeSpec
test
test-only CodeSpec
compile
doc
compile
exit
doc
console
doc
compile
console
doc
compile
console
compile
console
compile
  import Code._
  import Code.TwoSpecies._
  val r = execp2[MySim, Int](
    sims,
    ((s: MySim, until: Int) => s.execf(until)),
    0, 0
  )
console
doc
console
doc
compile
doc
compile
doc
compile
doc
compile
trait A {
  def f : A
}
class B extends A {
  def f : B = this
}
compile
doc
compile
doc
compile
doc
compile
doc
console
compile
doc
compile
doc
compile
doc
compile
doc
compile
doc
compile
doc
compile
console
compile
doc
compile
doc
compile
doc
compile
exit
compile
console
compile
doc
compile
doc
compile
doc
console
doc
def f[T](x: T) = {
  typeOf[T]
}
console
compile
console
compile
console
compile
console
compile
console
compile
doc
console
doc
console
doc
console
compile
doc
compile
console
compile
console
doc
compile
doc
compile
console
doc
console
compile
doc
compile
doc
compile
doc
:q
compile
publish-local
exit
package
publish-local
exit
test
console
test
compile
doc
exit
compile
exir
exit
compile
doc
compile
doc
compile
doc
compile
doc
test
compile
test
compile
doc
compile
doc
test
console
compile
doc
test
compile
doc
compile
doc
exit
compile
console
compile
console
compile
doc
compile
console
:q
compile
console
doc
console
compile
console
compile
console
compile
console
exit
doc
exit
compile
doc
console
compile
:q
exit
